package Demo07Multi;

/*
代码当中体现多态性：其实就是一句话，父类引用指向子类对象。

format：
父类名称 对象名 = new 子类名称();
or
接口名称 对象名 = new 实现类名称();

访问成员变量的两种方式：
1.直接通过对象名称访问成员变量：看等号左边是谁，优先用谁，没有则向上找。
2.间接通过成员方法访问成员变量，看该方法属于谁，优先用谁，没有则向上找。

在多态的代码当中，成员方法的访问规则是：
    看new的是谁，就优先用谁，没有则向上找。

口诀：编译看左边，运行看右边。

对比一下：
成员变量：编译看左边，运行还看左边。
成员方法：编译看左边，运行看右边。

 */

public class Multi {

    public static void main(String[] args) {
        //使用多态的写法
        //左侧父类的引用，指向了右侧子类的对象
        Fu obj = new Zi();

        obj.method();
        obj.methodFu();

        /*
        子类如果覆盖重写该方法，则用子类的方法。
        子类如果没有覆盖重写方法，则用父类的方法。
         */
        obj.shownum();

//        obj.methodZi(); //如果使用多态写法，methodZi方法不在父类中，因此不能使用该方法。
    }

}
